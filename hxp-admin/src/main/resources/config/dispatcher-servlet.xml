<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		">

    <!--dispatcher配置文件，默认路径在/WEB-INF/下 dispatcher-servlet.xml，里面包括freemarker的配置内容-->


    <!--  @Controller 声明Action组件
          @Service    声明Service组件    @Service("myMovieLister")
          @Repository 声明Dao组件
          @Component   泛指组件, 当不好归类时.
          @RequestMapping("/menu")  请求映射
          @Resource  用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName")
          @Autowired 用于注入，(spring提供的) 默认按类型装配
          @Transactional( rollbackFor={Exception.class}) 事务管理
          @ResponseBody
          @Scope("prototype")   设定bean的作用域 -->

    <!--注解说明 -->
    <context:annotation-config />
    <!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
    <context:component-scan base-package="com.hxp.*"/>
    <!--<bean  class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />-->

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <!--<property name="messageConverters">-->
            <!--<list>-->
                <!--<ref bean="mappingJacksonHttpMessageConverter" />&lt;!&ndash; json转换器 &ndash;&gt;-->
            <!--</list>-->
        <!--</property>-->
    </bean>


    <mvc:annotation-driven/>
        <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
           <property name="prefix" value="/views/" />
           <property name="suffix" value=".jsp" />
       </bean> -->

 <!--静态文件访问的方式两种写法-->
    <!--第一种<mvc:resources mapper="/**" location="/"/>-->

    <!--第二种-->
    <!--<mvc:resources mapper="/images/**" location="/resources/images/" cache-period="31556926"/>-->
    <!--<mvc:resources mapper="/js/**" location="/resources/js/" cache-period="31556926"/>-->
    <!--<mvc:resources mapper="/css/**" location="/resources/css/" cache-period="31556926"/>-->


    <!-- ===================================================== -->
    <!-- ViewResolver For FreeMarker -->
    <!-- ===================================================== -->

    <!-- FreeMarker视图解析 如返回userinfo。。在这里配置后缀名ftl和视图解析器。。 -->
    <bean id="freeMarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
        <property name="order" value="1"/>
        <property name="suffix" value=".ftl" />
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="exposeSpringMacroHelpers" value="true" />
    </bean>

    <!-- ===================================================== -->
    <!-- ViewResolver For FreeMarkerConfigurer -->
    <!-- ===================================================== -->


    <!--实例化FreeMarkerConfigurer工厂类-->
    <!-- freemarker的配置 -->
    <bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <!--模板的查找路径第一步先查找TemplateLoaderPath   然后加载视图跳转到dispatcher-servlet-->
        <property name="templateLoaderPath" value="/WEB-INF/ftl/" />
        <property name="freemarkerSettings"><!--设置FreeMarker环境属性-->
            <props>
                <prop key="template_update_delay">5</prop><!--刷新模板的周期，单位为秒-->
                <prop key="defaultEncoding">UTF-8</prop><!--模板的编码格式-->
                <prop key="locale">UTF-8</prop><!--本地化设置-->
                <prop key="boolean_format">true,false</prop>
                <prop key="whitespace_stripping">true</prop>
                <prop key="tag_syntax">auto_detect</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">0.####</prop>
            </props>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="value" value="0"></entry>
            </map>
        </property>
    </bean>

































    <!--MapperScanner配置。自动去搜索mapper里的对象，并注入-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hxp.mapper"/>
    </bean>

    <bean name="handlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
        <!--<property name="messageConverters">
            <list>
                 <ref bean="byteArray_hmc" />
                <ref bean="string_hmc" />
            </list>
        </property>-->
    </bean>
    <!-- <bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />处理..
    <bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" />处理..  -->
    <bean name="handlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
        <!-- 只会拦截@RequestMapping的URL
        <property name="interceptors">
             <list>
                 <bean class="com.mvc.MyInteceptor"></bean>
             </list>
         </property> -->
    </bean>

    <!--&lt;!&ndash;完成请求和注解POJO的映射&ndash;&gt;  暂时注销，以后可能会用到-->
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>-->

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
          p:basename="i18n/messages" />


    <!-- 全局拦截器   会拦截静态资源
    Spring为我们提供了：
    org.springframework.web.servlet.HandlerInterceptor接口，
    org.springframework.web.servlet.handler.HandlerInterceptorAdapter适配器，
    实现这个接口或继承此类，可以非常方便的实现自己的拦截器。

    有以下三个方法：

    Action之前执行:
     public boolean preHandle(HttpServletRequest request,
       HttpServletResponse response, Object handler);

    生成视图之前执行
     public void postHandle(HttpServletRequest request,
       HttpServletResponse response, Object handler,
       ModelAndView modelAndView);

    最后执行，可用于释放资源
     public void afterCompletion(HttpServletRequest request,
       HttpServletResponse response, Object handler, Exception ex)
    <mvc:interceptors >
     <mvc:interceptor>
            <mvc:mapper path="/UserDao/*" />  /UserDao/*
            <bean class="com.mvc.MyInteceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    -->

    <!-- 总错误处理
    这里主要的类是SimpleMappingExceptionResolver类，和他的父类AbstractHandlerExceptionResolver类。
    具体可以配置哪些属性，我是通过查看源码知道的。
    你也可以实现HandlerExceptionResolver接口，写一个自己的异常处理程序。
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView">
             <value>/error/error</value> error页面可以通过Exception e = (Exception)request.getAttribute("exception")获得异常信息
        </property>
        <property name="defaultStatusCode">
             <value>500</value>
        </property>
        <property name="warnLogCategory">
             <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
        </property>
    </bean>-->

    <!-- 对静态资源文件的访问  方案一 （二选一）
    会把"/**" url,注册到SimpleUrlHandlerMapping的urlMap中,把对静态资源的访问由HandlerMapping转到
    org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler处理并返回.
    DefaultServletHttpRequestHandler使用就是各个Servlet容器自己的默认Servlet.
    <mvc:default-servlet-handler/> -->

    <!-- 对静态资源文件的访问  方案二 （二选一）/images/**映射到ResourceHttpRequestHandler进行处理，
    location指定静态资源的位置.可以是web application根目录下、jar包里面，这样可以把静态资源压缩到jar包中。
    cache-period 可以使得静态资源进行web cache
    <mvc:resources mapper="/images/**" location="/images/" cache-period="31556926"/>
    <mvc:resources mapper="/js/**" location="/js/" cache-period="31556926"/>
    <mvc:resources mapper="/css/**" location="/css/" cache-period="31556926"/>-->

</beans>